# Generated by Django 4.2.9 on 2024-12-20 01:03

import computedfields.resolver
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('cognito_sub', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('wild_card_score', models.FloatField(default=0.0)),
                ('divisional_score', models.FloatField(default=0.0)),
                ('conference_score', models.FloatField(default=0.0)),
                ('super_bowl_score', models.FloatField(default=0.0)),
                ('total', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(choices=[('QB', 'Quarterback'), ('RB', 'Running Back'), ('WR', 'Wide Receiver'), ('TE', 'Tight End'), ('DEF', 'Defense/Special Teams')], max_length=12)),
                ('team', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='RosteredPlayers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_captain', models.BooleanField(default=False)),
                ('is_scaled_flex', models.BooleanField(default=False)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fantasy_football_app.entry')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fantasy_football_app.player')),
            ],
        ),
        migrations.AddField(
            model_name='entry',
            name='players',
            field=models.ManyToManyField(through='fantasy_football_app.RosteredPlayers', to='fantasy_football_app.player'),
        ),
        migrations.AddField(
            model_name='entry',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='WeeklyStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.CharField(blank=True, choices=[('WC', 'Wild Card'), ('DIV', 'Divisional'), ('CONF', 'Conference'), ('SB', 'Super Bowl')], max_length=12, null=True)),
                ('passing_yards', models.IntegerField(default=0)),
                ('passing_tds', models.IntegerField(default=0)),
                ('passing_interceptions', models.IntegerField(default=0)),
                ('rushing_yards', models.IntegerField(default=0)),
                ('rushing_tds', models.IntegerField(default=0)),
                ('receptions', models.IntegerField(default=0)),
                ('receiving_yards', models.IntegerField(default=0)),
                ('receiving_tds', models.IntegerField(default=0)),
                ('fumbles_lost', models.IntegerField(default=0)),
                ('sacks', models.IntegerField(default=0)),
                ('interceptions', models.IntegerField(default=0)),
                ('fumbles_recovered', models.IntegerField(default=0)),
                ('safeties', models.IntegerField(default=0)),
                ('defensive_tds', models.IntegerField(default=0)),
                ('return_tds', models.IntegerField(default=0)),
                ('points_allowed', models.IntegerField(default=0)),
                ('two_pt_conversions', models.IntegerField(default=0)),
                ('week_score', models.FloatField(editable=False)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fantasy_football_app.player')),
            ],
            options={
                'unique_together': {('player', 'week')},
            },
            bases=(computedfields.resolver._ComputedFieldsModelBase, models.Model),
        ),
    ]
